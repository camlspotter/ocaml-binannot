### Compile-time configuration

########## General configuration

### Where to install the binaries
BINDIR=/usr/local/bin

### Where to install the standard library
LIBDIR=/usr/local/lib/camlsl

### Where to install the man pages
MANDIR=/usr/local/man/man1
MANEXT=1

### Do #! scripts work on your system?
### Beware: on some systems (e.g. SunOS 4), this will work only if 
### the string "#!$(BINDIR)/ocamlrun" is less than 32 characters long.
### In doubt, set SHARPBANGSCRIPTS to false.
SHARPBANGSCRIPTS=true
#SHARPBANGSCRIPTS=false

########## Configuration for the bytecode compiler

### Which C compiler to use for the bytecode interpreter.
### Performance of the bytecode interpreter is *much* improved
### if Gnu CC version 2 is used.
#BYTECC=gcc
#BYTECC=cc

### Additional compile-time options for $(BYTECC).
# If using gcc on Intel 386 or Motorola 68k:
# (the -fno-defer-pop option circumvents a gcc bug)
#BYTECCCOMPOPTS=-fno-defer-pop -Wall
# If using gcc and being superstitious:
#BYTECCCOMPOPTS=-Wall
# Under NextStep:
#BYTECCCOMPOPTS=-U__GNUC__ -fno-defer-pop -Wall
# Otherwise:
#BYTECCCOMPOPTS=

### Additional link-time options for $(BYTECC)
### If using GCC on a Dec Alpha under OSF1:
#BYTECCLINKOPTS=-Xlinker -taso
# Otherwise:
#BYTECCLINKOPTS=

### Libraries needed
# On most platforms:
#CCLIBS=-lcurses -ltermcap -lm

### How to invoke the C preprocessor
# This is not needed anymore.  Leave these lines commented out.
# On most machines:
#CPP=/lib/cpp -P
# Under Solaris:
#CPP=/usr/ccs/lib/cpp -P
# Under FreeBSD:
#CPP=cpp -P

### How to invoke ranlib
# BSD-style:
#RANLIB=ranlib
#RANLIBCMD=ranlib
# If ranlib is not needed:
#RANLIB=ar rs
#RANLIBCMD=

############# Configuration for the native-code compiler

### Name of architecture for the native-code compiler
### Currently supported:
###
### alpha       DecStation 3000 under OSF1
### sparc       Sun Sparcstation under SunOS 4.1 or Solaris 2
### i386        Intel 386 / 486 / Pentium PCs under Linux, NextStep or FreeBSD
### mips        DecStation 3100 and 5000 under Ultrix 4
### hppa        HP 9000/700 under NextStep
### power       IBM RS6000 and PowerPC workstations under AIX 3.2
### m68k        Motorola 68020 and beyond under SunOS 4
###
### Set ARCH=none if your machine is not supported
#ARCH=alpha
#ARCH=sparc
#ARCH=i386
#ARCH=mips
#ARCH=hppa
#ARCH=m68k
#ARCH=none

### Name of architecture model for the native-code compiler.
### Some architectures come in several slightly different flavors
### that share a common code generator. This variable tailors the
### behavior of the code generator to the particular flavor used.
### Currently needed only if ARCH=power; leave MODEL=default for
### other architectures.
### If ARCH=power: choose between
###   MODEL=rs6000      The original IBM RS6000 workstations
###                     (RIOS and RIOS2 processors)
###   MODEL=ppc         The newer PowerPC processors
###                     (Motorola/IBM PPC601, PPC603, PPC604, etc)
### The Motorola PPC601 is compatible with both models, but the newer
### PPCs will work only with MODEL=ppc, and the older IBM RS6000
### workstations will work only with MODEL=rs6000.
###
### For other architectures: leave MODEL=default
###
#MODEL=rs6000
#MODEL=ppc
#MODEL=default

### Name of operating system family for the native-code compiler.
### If ARCH=sparc: choose between
###   SYSTEM=sunos      SunOS 4.1
###   SYSTEM=solaris    Solaris 2
###
### If ARCH=i386:  choose between
###   SYSTEM=linux_aout Linux with a.out binaries
###   SYSTEM=linux_elf  Linux with ELF binaries
###   SYSTEM=bsd        FreeBSD, probably works for NetBSD also
###   SYSTEM=nextstep   NextStep
###
### For other architectures: set SYSTEM=unknown
###
#SYSTEM=sunos
#SYSTEM=solaris
#SYSTEM=linux
#SYSTEM=linux_elf
#SYSTEM=bsd
#SYSTEM=nextstep
#SYSTEM=unknown

### Which C compiler to use for the native-code compiler.
### cc is better than gcc on the Mips and Alpha.
#NATIVECC=cc
#NATIVECC=gcc

### Additional compile-time options for $(NATIVECC).
# For cc on the Alpha:
#NATIVECCCOMPOPTS=-std1
# For cc on the Mips:
#NATIVECCCOMPOPTS=-std
# For gcc if superstitious:
#NATIVECCCOMPOPTS=-Wall

### Additional link-time options for $(NATIVECC)
#NATIVECCLINKOPTS=

### Flags for the assembler
# For the Alpha or the Mips:
#ASFLAGS=-O2
# For the PowerPC:
#ASFLAGS=-u -m ppc -w
# For the RS6000:
#ASFLAGS=-u -m pwr -w
# Otherwise:
#ASFLAGS=

### Command and flags to use for assembling .S files (often with preprocessing)
# If gcc is available:
#ASPP=gcc
#ASPPFLAGS=-c -DSYS_$(SYSTEM)
# On SunOS and Solaris:
#ASPP=$(AS)
#ASPPFLAGS=-P -DSYS_$(SYSTEM)
# Otherwise:
#ASPP=$(AS)
#ASPPFLAGS=

############# Configuration for the contributed libraries

### Which libraries to compile and install
# Currently available:
#       unix            Unix system calls
#       str             Regular expressions and high-level string processing
#       num             Arbitrary-precision rational arithmetic
#       threads         Lightweight concurrent processes 
#                       (require POSIX threads)
#       graph           Portable drawing primitives for X11
#       dynlink         Dynamic linking of bytecode
#
OTHERLIBRARIES=unix str num threads graph dynlink

### Name of the target architecture for the "num" library
# Known targets:
#       x86     68K     vax     ns      mips    alpha   pyramid i960
#       sparc   supersparc      sparc-solaris   supersparc-solaris
# See the file otherlibs/num/README for more explanations.
# If you don't know, leave BIGNUM_ARCH=C, which selects a portable
# C implementation of these routines.
BIGNUM_ARCH=C

### Location of the include directory containing the X11/*.h includes
# Needed for the "graph" package
# Usually:
#X11_INCLUDES=/usr/include
# For SunOS with OpenLook:
#X11_INCLUDES=/usr/openwin/include

### Link-time options to ocamlc or ocamlopt for linking with X11 libraries
# Needed for the "graph" package
# Usually:
#X11_LINK=-cclib -lX11
# For SunOS with OpenLook:
#X11_LINK=-cclib -L$(X11_LIB) -cclib -lX11


#########################################################################
#                                                                       #
#                            Objective Caml                             #
#                                                                       #
#            Xavier Leroy, projet Cristal, INRIA Rocquencourt           #
#                                                                       #
#   Copyright 1999 Institut National de Recherche en Informatique et    #
#   en Automatique.  All rights reserved.  This file is distributed     #
#   under the terms of the GNU Library General Public License, with     #
#   the special exception on linking described in file ../LICENSE.      #
#                                                                       #
#########################################################################

# $Id$

# Configuration for Windows, Visual C++ compiler

######### General configuration

PREFIX=C:/ocaml

### Where to install the binaries.
# If you change this, also change camlp4/config/Makefile-nt.cnf
BINDIR=$(PREFIX)/bin

### Where to install the standard library
# If you change this, also change camlp4/config/Makefile-nt.cnf
LIBDIR=$(PREFIX)/lib

### Where to install the stub DLLs
STUBLIBDIR=$(LIBDIR)/stublibs

### Where to install the info files
DISTRIB=$(PREFIX)

########## Toolchain and OS dependencies

TOOLCHAIN=msvc
CCOMPTYPE=msvc
O=obj
A=lib
S=asm
SO=s.obj
DO=d.obj
EXE=.exe

########## Configuration for the bytecode compiler

### Which C compiler to use for the bytecode interpreter.
BYTECC=cl /nologo

### Additional compile-time options for $(BYTECC).  (For static linking.)
BYTECCCOMPOPTS=/Ox /MT

### Additional link-time options for $(BYTECC).  (For static linking.)
BYTECCLINKOPTS=/MT

### Additional compile-time options for $(BYTECC).  (For building a DLL.)
DLLCCCOMPOPTS=/Ox /MD -DCAML_DLL

### Libraries needed
BYTECCLIBS=advapi32.lib
NATIVECCLIBS=advapi32.lib

### How to invoke the C preprocessor
CPP=cl /nologo /EP

### How to build a DLL
MKDLL=link /nologo /dll /out:$(1) /implib:$(2) $(3)

### How to build a static library
MKLIB=lib /nologo /debugtype:CV /out:$(1) $(2)

### Canonicalize the name of a system library
SYSLIB=$(1).lib

### The ranlib command
RANLIBCMD=

############# Configuration for the native-code compiler

### Name of architecture for the native-code compiler
ARCH=i386

### Name of architecture model for the native-code compiler.
MODEL=default

### Name of operating system family for the native-code compiler.
SYSTEM=win32

### Which C compiler to use for the native-code compiler.
NATIVECC=cl /nologo

### Additional compile-time options for $(NATIVECC).
NATIVECCCOMPOPTS=/Ox /MT

### Additional link-time options for $(NATIVECC)
NATIVECCLINKOPTS=/MT

### Build partially-linked object file
PARTIALLD=lib /nologo /debugtype:cv

### nm and objcopy are missing
BINUTILS_NM=
BINUTILS_OBJCOPY=

############# Configuration for the contributed libraries

OTHERLIBRARIES=win32unix systhreads str num win32graph dynlink bigarray labltk

### Name of the target architecture for the "num" library
BIGNUM_ARCH=C

### Configuration for LablTk
# Set TK_ROOT to the directory where you installed TCL/TK 8.3
TK_ROOT=c:/tcl
TK_DEFS=-I$(TK_ROOT)/include
# The following definition avoids hard-wiring $(TK_ROOT) in the libraries
# produced by OCaml, and is therefore required for binary distribution
# of these libraries.  However, $(TK_ROOT) must be added to the LIB
# environment variable, as described in README.win32.
TK_LINK=tk83.lib tcl83.lib
# An alternative definition that avoids mucking with the LIB variable,
# but hard-wires the Tcl/Tk location in the binaries
# TK_LINK=$(TK_ROOT)/tk83.lib $(TK_ROOT)/tcl83.lib

############# Aliases for common commands

MAKEREC=$(MAKE) -f Makefile.nt 
MAKECMD=$(MAKE)

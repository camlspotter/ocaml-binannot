include ../../config/Makefile.nt

# Compilation options
CC=$(BYTECC)
CFLAGS=-I..\..\byterun $(BYTECCCOMPOPTS)
CAMLC=..\..\boot\ocamlrun ..\..\boot\ocamlc -I ..\..\stdlib -I ..\win32unix
CAMLOPT=..\..\boot\ocamlrun ..\..\ocamlopt -I ..\..\stdlib -I ..\win32unix
CPPFLAGS=/DWIN32

BYTECODE_C_OBJS=win32_b.obj
NATIVECODE_C_OBJS=win32_n.obj

THREAD_OBJS=thread.cmo condition.cmo event.cmo threadUnix.cmo

GENFILES=thread.ml

all: libthreads.lib threads.cma stdlib.cma

allopt: libthreadsnat.a threads.cmxa

libthreads.lib: $(BYTECODE_C_OBJS)
	rm -f libthreads.lib
	$(MKLIB)libthreads.lib $(BYTECODE_C_OBJS)

win32_b.obj: win32.c
	$(BYTECC) -O -I..\..\byterun $(BYTECCCOMPOPTS) -c win32.c
	mv win32.obj win32_b.obj

libthreadsnat.lib: $(NATIVECODE_C_OBJS)
	rm -f libthreadsnat.lib
	$(MKLIB)libthreadsnat.lib $(NATIVECODE_C_OBJS)

win32_n.obj: win32.c
	$(NATIVECC) -DNATIVE_CODE -O -I..\..\asmrun -I..\..\byterun $(NATIVECCCOMPOPTS) -c win32.c
	mv win32.obj win32_n.obj

threads.cma: $(THREAD_OBJS)
	$(CAMLC) -a -o threads.cma $(THREAD_OBJS)

threads.cmxa: $(THREAD_OBJS:.cmo=.cmx)
	$(CAMLOPT) -a -o threads.cmxa $(THREAD_OBJS:.cmo=.cmx)

partialclean:
	rm -f *.cm*

clean: partialclean
	rm -f libthreads.a *.o *.cm*
	rm -f $(GENFILES)

install:
	cp libthreads.lib $(LIBDIR)/libthreads.lib
	if not exist $(LIBDIR)\threads mkdir $(LIBDIR)\threads
	cp thread.cmi mutex.cmi condition.cmi event.cmi threadUnix.cmi threads.cma stdlib.cma $(LIBDIR)/threads

installopt:

.SUFFIXES: .ml .mli .mlp .cmo .cmi .cmx

.mli.cmi:
	$(CAMLC) -c $(COMPFLAGS) $<

.ml.cmo:
	$(CAMLC) -c $(COMPFLAGS) $<

.ml.cmx:
	$(CAMLOPT) -c $(COMPFLAGS) $<

.mlp.ml:
	@rm -f $*.ml
	$(CPP) $(CPPFLAGS) $*.mlp > $*.ml
	@attrib +r $*.ml

thread.ml: thread.mlp
condition.ml: condition.mlp

depend:
#	gcc -MM -I../../byterun *.c > .depend
	..\..\boot\ocamlrun ../../tools/ocamldep *.mli *.ml >> .depend

include .depend
